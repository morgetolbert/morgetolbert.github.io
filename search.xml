<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>编译ASP.NET Core源码</title>
    <url>/posts/b063dee6.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>项目编译官方文档：<a href="https://github.com/dotnet/aspnetcore/blob/main/docs/BuildFromSource.md">https://github.com/dotnet/aspnetcore/blob/main/docs/BuildFromSource.md</a></li>
</ul>
<h2 id="第一步：设置代理环境变量"><a href="#第一步：设置代理环境变量" class="headerlink" title="第一步：设置代理环境变量"></a>第一步：设置代理环境变量</h2><p><code>ASP.NET Core</code>项目的编译脚本需要在线下载很多东西， 鉴于国内的网络环境，如果你没有一个快速的代理， 基本上编译脚本是没希望执行成功的。</p>
<p>因此，如果想要快速顺利的编译项目，必须要设置代理。</p>
<h3 id="方式1：-从控制面板里面配置环境变量（一直有效）"><a href="#方式1：-从控制面板里面配置环境变量（一直有效）" class="headerlink" title="方式1： 从控制面板里面配置环境变量（一直有效）"></a>方式1： 从控制面板里面配置环境变量（一直有效）</h3><p>跟平常修改windows path环境变量一样的方法， 在控制面板里面，新建 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 这两个环境变量。</p>
<h3 id="方式2：-从Powershell命令行手动设置（临时有效）"><a href="#方式2：-从Powershell命令行手动设置（临时有效）" class="headerlink" title="方式2： 从Powershell命令行手动设置（临时有效）"></a>方式2： 从Powershell命令行手动设置（临时有效）</h3><p>Powershell中使用下列命令设置环境变量：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:HTTP_PROXY</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="variable">$env:HTTPS_PROXY</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="检查环境变量是否生效"><a href="#检查环境变量是否生效" class="headerlink" title="检查环境变量是否生效"></a>检查环境变量是否生效</h3><p>上面两种方式，选其一设置即可。</p>
<p>打开<code>Powershell</code>，输入 <code>$env:HTTPS_PROXY</code>，<code>$env:HTTPS_PROXY</code> 两条命令，检查输出，看环境变量是否生效。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\&gt; <span class="variable">$env:HTTPS_PROXY</span></span><br><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> D:\&gt; <span class="variable">$env:HTTP_PROXY</span></span><br><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> D:\&gt; </span><br></pre></td></tr></table></figure>

<h2 id="第二步：下载源码"><a href="#第二步：下载源码" class="headerlink" title="第二步：下载源码"></a>第二步：下载源码</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:</span><br><span class="line">git clone <span class="literal">--recursive</span> https://github.com/dotnet/aspnetcore.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> D:\aspnetcore</span><br><span class="line">git submodule update <span class="literal">--init</span> <span class="literal">--recursive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于特定版本创建新分支，这样就可以把修改保存在新分支上。</span></span><br><span class="line">git checkout v8.<span class="number">0.5</span></span><br><span class="line">git branch review<span class="literal">-v8</span>.<span class="number">0.5</span></span><br></pre></td></tr></table></figure>

<h2 id="第三步：安装需要的Visual-Studio组件"><a href="#第三步：安装需要的Visual-Studio组件" class="headerlink" title="第三步：安装需要的Visual Studio组件"></a>第三步：安装需要的<code>Visual Studio</code>组件</h2><p>为了编译项目需要安装很多Visual Studio组件，项目开发人员很贴心，仓库里面已经提供了VS2022安装配置文件<code>.vsconfig</code>，导入配置文件进行安装就好了。</p>
<p>即使你已经安装了 <code>Visual Studio 2022</code> ，也要使用 <code>.vsconfig</code> 配置文件重新导入一下，不然在后面的步骤，可能会因为缺失组件而报错。</p>
<p>导入方法： 打开<code>Visual Studio Installer</code>， 更多 -&gt; 载入配置 -&gt; 选择 <code>D:\aspnetcore\.vsconfig</code> -&gt; 查看详细信息。</p>
<ul>
<li>关于<code>Visual Studio</code>导入或导出安装配置的说明，MSDN文档链接如下：</li>
<li><a href="https://learn.microsoft.com/zh-cn/visualstudio/install/import-export-installation-configurations">https://learn.microsoft.com/zh-cn/visualstudio/install/import-export-installation-configurations</a></li>
</ul>
<h2 id="第四步：正式编译步骤"><a href="#第四步：正式编译步骤" class="headerlink" title="第四步：正式编译步骤"></a>第四步：正式编译步骤</h2><p>按照仓库里面提供的文档，你只需要在Powershell里面执行<code>.\restore.cmd</code>即可，这也是提供编译脚本的目的。</p>
<p>但是， 你人在国内，由于网络问题，导致无法正常下载编译需要用到的文件，所以如果没有代理，你不可能顺利执行脚本成功的。</p>
<p>为了能够顺利执行脚本成功，你还需要进行如下额外的步骤。</p>
<h3 id="1-修改编译脚本使用代理加速下载"><a href="#1-修改编译脚本使用代理加速下载" class="headerlink" title="1. 修改编译脚本使用代理加速下载"></a>1. 修改编译脚本使用代理加速下载</h3><h4 id="1-1-修改eng-common-tools-ps1-文件"><a href="#1-1-修改eng-common-tools-ps1-文件" class="headerlink" title="1.1 修改eng\common\tools.ps1 文件"></a>1.1 修改<code>eng\common\tools.ps1</code> 文件</h4><p>搜索文件内所有的 <code>Invoke-WebRequest</code>，脚本使用此命令下载文件，添加<code>-Proxy</code>选项，可以让该命令走代理。</p>
<p>因此我们把<code>Invoke-WebRequest</code>改成 <code>Invoke-WebRequest -Proxy &quot;http://127.0.0.1:1080&quot; </code>。</p>
<p>搜索<code>Attempting to install</code>，找到 <code>$installScript @variation</code> , 这一行的意思是使用微软官方的<code>dotnet-install-script</code>来安装 .net sdk，该脚本提供了<code>-ProxyAddress</code>选项，用于指定代理。</p>
<p>因此我们把<code>$installScript @variation</code>改成<code>$installScript -ProxyAddress &quot;http://127.0.0.1:1080&quot; @variation</code>。</p>
<h4 id="1-2-命令参考文档："><a href="#1-2-命令参考文档：" class="headerlink" title="1.2 命令参考文档："></a>1.2 命令参考文档：</h4><ul>
<li><a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest">https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest</a></li>
<li><a href="https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script">https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script</a></li>
</ul>
<h3 id="2-使用nvm管理Node-js的版本"><a href="#2-使用nvm管理Node-js的版本" class="headerlink" title="2. 使用nvm管理Node.js的版本"></a>2. 使用nvm管理Node.js的版本</h3><p>ASP.NET Core项目源码依赖特定版本的<code>Node.js</code>，通常不会是最新版本的<code>Node.js</code>。 </p>
<p>如果你现有安装的<code>Node.js</code>版本匹配不上项目依赖，项目编译就会报错，这就需要<code>Node.js</code>多版本并存安装，这里推荐使用<code>nvm</code>来管理多版本的<code>Node.js</code>。</p>
<ul>
<li><code>nvm</code>项目地址：<a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装并使用 Node.js 18.20.2</span></span><br><span class="line">nvm install <span class="number">18.20</span>.<span class="number">2</span></span><br><span class="line">nvm use <span class="number">18.20</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装并使用 Node.js 19.8.1</span></span><br><span class="line">nvm install <span class="number">19.8</span>.<span class="number">1</span></span><br><span class="line">nvm use <span class="number">19.8</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当然，你也可以手动下载 Node.js 安装包进行安装， 只要跟项目依赖能匹配上就行。</li>
<li>对于 ASP.NET Core v8.0.5 源码，使用 18.x 或 19.x 都是可以的，二选一安装即可。</li>
<li>对于 ASP.NET Core 其他版本的源码，根据报错信息，安装相应版本即可。</li>
</ul>
<h3 id="3-还原项目"><a href="#3-还原项目" class="headerlink" title="3. 还原项目"></a>3. 还原项目</h3><p>经过上面的操作，我们已经安装好了所有需要的 <code>Visual Studio</code> 组件，设置了代理，安装了项目匹配的 <code>Node.js</code> 版本。</p>
<p>现在可以执行<code>.\restore.cmd</code> 了， 这个时候执行脚本还原项目就不会出错了。</p>
<h2 id="第五步：Visual-Studio打开项目"><a href="#第五步：Visual-Studio打开项目" class="headerlink" title="第五步：Visual Studio打开项目"></a>第五步：Visual Studio打开项目</h2><p>使用 <code>startvs.cmd</code> 调用 Visual Studio 2022 来打开项目， 不要直接双击sln文件。</p>
<h3 id="为什么不能直接双击sln文件？"><a href="#为什么不能直接双击sln文件？" class="headerlink" title="为什么不能直接双击sln文件？"></a>为什么不能直接双击sln文件？</h3><ul>
<li>脚本下载安装的编译工具都在 <code>D:\aspnetcore\.dotnet</code>，<code>D:\aspnetcore\.tools</code> 目录，这些文件夹都在Git仓库目录下面，这些路径非SDK默认路径，是需要进行配置的。</li>
<li>你需要使用脚本来加载项目的相关配置，如果不使用<code>startvs.cmd</code>，会缺失配置。</li>
</ul>
]]></content>
      <categories>
        <category>.NET开发</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>编译.NET Runtime源码</title>
    <url>/posts/8c23d09a.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>项目编译官方文档：<a href="https://github.com/dotnet/runtime/blob/main/docs/workflow/README.md">https://github.com/dotnet/runtime/blob/main/docs/workflow/README.md</a></li>
</ul>
<h2 id="第一步：设置代理环境变量"><a href="#第一步：设置代理环境变量" class="headerlink" title="第一步：设置代理环境变量"></a>第一步：设置代理环境变量</h2><p><code>.NET Runtime</code>项目的编译脚本需要在线下载很多东西， 鉴于国内的网络环境，如果你没有一个快速的代理， 基本上编译脚本是没希望执行成功的。</p>
<p>因此，如果想要快速顺利的编译项目，必须要设置代理。</p>
<h3 id="方式1：-从控制面板里面配置环境变量（一直有效）"><a href="#方式1：-从控制面板里面配置环境变量（一直有效）" class="headerlink" title="方式1： 从控制面板里面配置环境变量（一直有效）"></a>方式1： 从控制面板里面配置环境变量（一直有效）</h3><p>跟平常修改windows path环境变量一样的方法， 在控制面板里面，新建 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 这两个环境变量。</p>
<h3 id="方式2：-从Powershell命令行手动设置（临时有效）"><a href="#方式2：-从Powershell命令行手动设置（临时有效）" class="headerlink" title="方式2： 从Powershell命令行手动设置（临时有效）"></a>方式2： 从Powershell命令行手动设置（临时有效）</h3><p>Powershell中使用下列命令设置环境变量：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:HTTP_PROXY</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="variable">$env:HTTPS_PROXY</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="检查环境变量是否生效"><a href="#检查环境变量是否生效" class="headerlink" title="检查环境变量是否生效"></a>检查环境变量是否生效</h3><p>上面两种方式，选其一设置即可。</p>
<p>打开<code>Powershell</code>，输入 <code>$env:HTTPS_PROXY</code>，<code>$env:HTTPS_PROXY</code> 两条命令，检查输出，看环境变量是否生效。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\&gt; <span class="variable">$env:HTTPS_PROXY</span></span><br><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> D:\&gt; <span class="variable">$env:HTTP_PROXY</span></span><br><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> D:\&gt; </span><br></pre></td></tr></table></figure>

<h2 id="第二步：-下载源码"><a href="#第二步：-下载源码" class="headerlink" title="第二步： 下载源码"></a>第二步： 下载源码</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:</span><br><span class="line">git clone <span class="literal">--recursive</span> https://github.com/dotnet/runtime.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> D:\runtime</span><br><span class="line">git submodule update <span class="literal">--init</span> <span class="literal">--recursive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于特定版本创建新分支，这样就可以把修改保存在新分支上。</span></span><br><span class="line">git checkout v8.<span class="number">0.5</span></span><br><span class="line">git branch review<span class="literal">-v8</span>.<span class="number">0.5</span></span><br></pre></td></tr></table></figure>

<h2 id="第三步：-安装需要的Visual-Studio组件"><a href="#第三步：-安装需要的Visual-Studio组件" class="headerlink" title="第三步： 安装需要的Visual Studio组件"></a>第三步： 安装需要的<code>Visual Studio</code>组件</h2><p>为了编译项目需要安装很多Visual Studio组件，项目开发人员很贴心，仓库里面已经提供了VS2022安装配置文件<code>.vsconfig</code>，导入配置文件进行安装就好了。</p>
<p>即使你已经安装了 <code>Visual Studio 2022</code> ，也要使用 <code>.vsconfig</code> 配置文件重新导入一下，不然在后面的步骤，可能会因为缺失组件而报错。</p>
<p>导入方法： 打开<code>Visual Studio Installer</code>， 更多 -&gt; 载入配置 -&gt; 选择 <code>.vsconfig</code> -&gt; 查看详细信息。</p>
<ul>
<li>关于<code>Visual Studio</code>导入或导出安装配置的说明，MSDN文档链接如下：</li>
<li><a href="https://learn.microsoft.com/zh-cn/visualstudio/install/import-export-installation-configurations">https://learn.microsoft.com/zh-cn/visualstudio/install/import-export-installation-configurations</a></li>
</ul>
<h2 id="第三步：正式编译步骤"><a href="#第三步：正式编译步骤" class="headerlink" title="第三步：正式编译步骤"></a>第三步：正式编译步骤</h2><h3 id="1-编译项目"><a href="#1-编译项目" class="headerlink" title="1. 编译项目"></a>1. 编译项目</h3><p>在.NET Runtime项目文件夹，执行下列命令，进行编译。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line"><span class="variable">$env:HTTP_PROXY</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="variable">$env:HTTPS_PROXY</span>=<span class="string">&quot;http://127.0.0.1:1080&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译项目</span></span><br><span class="line">.\build.cmd clr+libs <span class="literal">-rc</span> Release</span><br></pre></td></tr></table></figure>

<ul>
<li>注意： 一定要设置代理, 这个很重要；</li>
</ul>
<h3 id="2-在vs中打开项目"><a href="#2-在vs中打开项目" class="headerlink" title="2. 在vs中打开项目"></a>2. 在vs中打开项目</h3><p>如果你要查看的项目，项目文件夹内有sln文件，你可以直接使用<code>visual studio</code>打开。</p>
<p>如果项目文件夹内没有sln文件，从命令行执行下列命令，该命令会自动调用<code>visual studio</code>并打开项目。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># System.Private.CoreLib 是项目文件夹的名称， 换成你要查看的项目。</span></span><br><span class="line"></span><br><span class="line">.\build.cmd <span class="literal">-vs</span> System.Private.CoreLib</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>.NET开发</category>
      </categories>
      <tags>
        <tag>.NET Runtime</tag>
      </tags>
  </entry>
</search>
